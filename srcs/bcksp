# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    bcksp                                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: iguscett <iguscett@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/10/21 18:11:32 by iguscett          #+#    #+#              #
#    Updated: 2022/10/24 23:08:07 by iguscett         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "cub3d.h"

void set_screen_lr_points(t_data *data)
{
	data->screen.pleft.x = data->player.pos.x + HALF;
	data->screen.pleft.y = data->player.pos.y + DIST;
	data->screen.pright.x = data->player.pos.x - HALF;
	data->screen.pright.y = data->player.pos.y + DIST;
	z_rotation(data, &data->screen.pleft, data->player.angle);
	z_rotation(data, &data->screen.pright, data->player.angle);
}

double norm_vector(t_vect v)
{
	return (sqrt((v.vx * v.vx) + (v.vy * v.vy)));
}

void init_screen(t_data *data)
{
	double norm;
	data->screen.dist = malloc(sizeof(data->screen.dist) * data->width); // protect malloc
	data->screen.wheight = malloc(sizeof(data->screen.wheight) * data->width); // protect malloc
	// set_screen_lr_points(data);
		data->screen.pleft.x = data->player.pos.x + HALF;
	data->screen.pleft.y = data->player.pos.y + DIST;
	data->screen.pright.x = data->player.pos.x - HALF;
	data->screen.pright.y = data->player.pos.y + DIST;
	z_rotation(data, &data->screen.pleft, data->player.angle);
	z_rotation(data, &data->screen.pright, data->player.angle);
	data->screen.xincr = (HALF * 2) / data->width;
	data->screen.fullh = data->screen.xincr * data->height;
	data->screen.yincr = data->screen.fullh / data->height;
	data->screen.v.vx = (data->screen.pright.x - data->screen.pleft.x) / norm_vector(data->screen.v);
	data->screen.v.vy = (data->screen.pright.y - data->screen.pleft.y) / norm_vector(data->screen.v);
	// norm = norm_vector(data->screen.v); sqrt((data->screen.v.vx * data->screen.v.vx) + (data->screen.v.vy * data->screen.v.vy));
	// data->screen.v.vx /= norm;
	// data->screen.v.vy /= norm;
}


	// printf("FULL:%f xincr:%f width:%d width*xincr:%f\n", 2 * HALF, data->screen.xincr, data->width, data->width*data->screen.xincr);
	// printf("y full:%f yincr:%f full(multiplication):%f\n", data->screen.fullh, data->screen.yincr, data->screen.yincr * data->height);
	// printf("vx:%f vy:%f\n", data->screen.v.vx, data->screen.v.vy);
